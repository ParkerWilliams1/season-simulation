import { Team, saints, giants, indies, knights,heat, devils, red_sharks, tornadoes, cavs, rebels, natives, soul,islanders, grizzlies, dynamite, aggies, gladiators, arrows, spartins, flames,mustangs, falcons, coasters, mountaineers, squids, braves, gold, colonials,stars, ducks, quakes, slisers, league } from './team_list.js'

const allGames = [];
const maxGamesPerTeam = 15;

function getRandomWinner(team1, team2) {
  return Math.random() < 0.5 ? team1 : team2;
}

const gamesPlayed = new Map();

// Initialize gamesPlayed map with each team set to 0 games played
Object.keys(league).forEach(leagueName => {
  Object.values(league[leagueName]).forEach(division => {
    division.forEach(team => {
      gamesPlayed.set(team, 0);
    });
  });
});

function createDivisionalGames(division) {
  const divisionGames = [];
  for (let i = 0; i < division.length; i++) {
    for (let j = i + 1; j < division.length; j++) {
      if (gamesPlayed.get(division[i]) < maxGamesPerTeam && gamesPlayed.get(division[j]) < maxGamesPerTeam) {
        divisionGames.push([division[i], division[j]]);
        gamesPlayed.set(division[i], gamesPlayed.get(division[i]) + 1);
        gamesPlayed.set(division[j], gamesPlayed.get(division[j]) + 1);
      }
    }
  }
  return divisionGames;
}

function createInterConferenceGames(conference1, conference2) {
  const interConferenceGames = [];
  for (let i = 0; i < conference1.length; i++) {
    for (let j = 0; j < conference2.length; j++) {
      if (gamesPlayed.get(conference1[i]) < maxGamesPerTeam && gamesPlayed.get(conference2[j]) < maxGamesPerTeam) {
        interConferenceGames.push([conference1[i], conference2[j]]);
        gamesPlayed.set(conference1[i], gamesPlayed.get(conference1[i]) + 1);
        gamesPlayed.set(conference2[j], gamesPlayed.get(conference2[j]) + 1);
      }
    }
  }
  return interConferenceGames;
}

// Adding all divisional games
for (const leagueName in league) {
  for (const divisionName in league[leagueName]) {
    const division = league[leagueName][divisionName];
    allGames.push(...createDivisionalGames(division));
  }
}

// Adding intra-conference games (same conference, different division)
const conferences = Object.values(league);
conferences.forEach(conference => {
  const conferenceDivisions = Object.values(conference);
  for (let i = 0; i < conferenceDivisions.length; i++) {
    for (let j = i + 1; j < conferenceDivisions.length; j++) {
      const games = createInterConferenceGames(conferenceDivisions[i], conferenceDivisions[j]);
      allGames.push(...games);
    }
  }
});

// Adding inter-conference games (different conferences)
const conferenceNames = Object.keys(league);
for (let i = 0; i < conferenceNames.length; i++) {
  for (let j = i + 1; j < conferenceNames.length; j++) {
    const conference1 = league[conferenceNames[i]];
    const conference2 = league[conferenceNames[j]];
    for (const division1 in conference1) {
      for (const division2 in conference2) {
        const games = createInterConferenceGames(conference1[division1], conference2[division2]);
        allGames.push(...games);
      }
    }
  }
}

function simulateGames(games) {
  const records = new Map(); 

  // Initialize records for all teams
  for (let i = 0; i < games.length; i++) {
    const homeTeam = games[i][0];
    const awayTeam = games[i][1];

    if (!records.has(homeTeam)) {
      records.set(homeTeam, { wins: 0, losses: 0 });
    }
    if (!records.has(awayTeam)) {
      records.set(awayTeam, { wins: 0, losses: 0 });
    }
  }

  // Simulate each game
  for (let i = 0; i < games.length; i++) {
    const homeTeam = games[i][0];
    const awayTeam = games[i][1];
    const winner = getRandomWinner(homeTeam, awayTeam);
    const loser = winner === homeTeam ? awayTeam : homeTeam;

   //  console.log(`${winner.teamName} has beaten ${loser.teamName} ${winner === homeTeam ? "at home" : "on the road"}`);

    // Update records
    const winnerRecord = records.get(winner);
    const loserRecord = records.get(loser);

    winnerRecord.wins++;
    loserRecord.losses++;
  }

  return records;
}

// ******************************************************************************************************************8

function determinePlayoffBracket(league, recap) {
  const playoffBracket = { Beast: [], Strong: [] };

  // Loop through each conference in the league
  for (const conferenceName in league) {
    const conference = league[conferenceName];
    const divisionWinners = [];
    const remainingTeams = [];

    // Loop through each division in the conference
    for (const division in conference) {
      const divisionTeams = conference[division];
      
      // Get the team records from the recap map
      const divisionRecords = new Map();
      divisionTeams.forEach(team => {
        const teamRecord = recap.get(team);
        if (teamRecord) {
          divisionRecords.set(team, teamRecord);
        }
      });

      // Find the division winner based on the most wins
      const divisionWinner = [...divisionRecords.entries()].reduce((bestTeam, currentTeam) => {
        return currentTeam[1].wins > bestTeam[1].wins ? currentTeam : bestTeam;
      });

      // Add the division winner to the divisionWinners list
      divisionWinners.push({
        teamName: divisionWinner[0],
        record: divisionWinner[1],
      });

      // Add the remaining teams for wildcard consideration
      divisionRecords.forEach((record, teamName) => {
        if (teamName !== divisionWinner[0]) {
          remainingTeams.push({ teamName, record });
        }
      });
    }
    divisionWinners.sort((a, b) => b.record.wins - a.record.wins);
    // Sort remaining teams by wins, and if necessary, by additional tiebreakers
    remainingTeams.sort((a, b) => b.record.wins - a.record.wins);

    // Select the top two teams (wildcards) that didn't win their division
    const wildcards = remainingTeams.slice(0, 2);

    // Combine division winners and wildcards
    playoffBracket[conferenceName] = [...divisionWinners, ...wildcards];
  }

  return playoffBracket;
}

// ******************************************************************************************************************8
function printDivisionStandings(league, seasonRecap) {
  // Loop through each conference in the league
  for (const conferenceName in league) {
    console.log(`\nDivision Standings for Conference: ${conferenceName}\n`);

    // Loop through each division in the conference
    for (const divisionName in league[conferenceName]) {
      const division = league[conferenceName][divisionName];
      const divisionRecords = division.map(team => {
        return {
          teamName: team.teamName,
          record: seasonRecap.get(team),
        };
      });

      // Sort the teams by wins (descending)
      divisionRecords.sort((a, b) => b.record.wins - a.record.wins);

      // Print out the standings for the division
      console.log(`\nDivision: ${divisionName}`);
      divisionRecords.forEach(({ teamName, record }) => {
        console.log(`${teamName}: ${record.wins}-${record.losses}`);
      });
    }
  }
}

function printPlayoffRankings(playoffs) {
  // Loop through each conference in the playoffs
  for (const conferenceName in playoffs) {
    console.log(`\nPlayoff Rankings for Conference: ${conferenceName}\n`);

    // Get the teams in the playoff bracket for the conference
    const teams = playoffs[conferenceName];

    // Print out the rankings for each team in the conference
    teams.forEach((team, index) => {
      console.log(`Rank ${index + 1}: ${team.teamName._teamLocation} ${team.teamName._teamName} - ${team.record.wins}-${team.record.losses}`);
    });
  }
}
// ****************************************************************************************************************
let seasonRecap = simulateGames(allGames);
printDivisionStandings(league, seasonRecap);
let playoffs = determinePlayoffBracket(league, seasonRecap);
printPlayoffRankings(playoffs);
playoffMatchups(playoffs);

function playoffMatchups(playoffs) {
  let matches = []; 
  for (let conference in playoffs) {
    console.log(playoffs.conference["Strong"]);
    /*matches.push([playoffs.conference[2], playoffs.conference[5]])
    matches.push([playoffs.conference[3], playoffs.conference[4]])
    console.log(matches);*/
  }
}






